src/redemptions.rs:106:    let ids: Vec<Uuid> = res.unwrap().iter().map(|r| r.reward_id).collect();
src/themesong/mod.rs:89:    Ok(played_count.result.unwrap() > 0)
src/themesong/mod.rs:336:        let (stream, handle) = rodio::OutputStream::try_default().unwrap();
src/themesong/mod.rs:570:                .unwrap(),
src/themesong/mod.rs:581:            .unwrap(),
src/bin/youtubedl.rs:14:    let (_stream, handle) = rodio::OutputStream::try_default().unwrap();
src/bin/youtubedl.rs:15:    let sink = rodio::Sink::try_new(&handle).unwrap();
src/raffle.rs:101:            let user_name = self.users.get(user_id).unwrap();
src/bin/insert_themesong.rs:25:    let (_stream, handle) = rodio::OutputStream::try_default().unwrap();
src/bin/insert_themesong.rs:26:    let sink = rodio::Sink::try_new(&handle).unwrap();
src/bin/insert_themesong.rs:29:    sink.append(rodio::Decoder::new(BufReader::new(x)).unwrap());
src/bin/twitter.rs:22:        BearerToken::new(std::env::var("TWITTER_APP_BEARER_TOKEN").unwrap());
src/bin/music_video_creator_site.rs:36:    let listener = tokio::net::TcpListener::bind("0.0.0.0:4001").await.unwrap();
src/bin/music_video_creator_site.rs:37:    axum::serve(listener, app).await.unwrap();
src/bin/websockets.rs:78:        .unwrap();
src/bin/websockets.rs:79:    tracing::debug!("listening on {}", listener.local_addr().unwrap());
src/bin/websockets.rs:85:    .unwrap();
src/bin/chat.rs:309:        get_lb_status().lock().unwrap().clone(),
src/bin/chat.rs:367:        .unwrap();
src/handlers/ai_screenshots_timer_handler.rs:113:    let selected_choice = choices.choose(&mut rng).unwrap();
src/bin/begin.rs:91:        let elevenlabs_auth = Auth::from_env().unwrap();
src/bin/begin.rs:126:        "macos" => rodio::OutputStream::try_default().unwrap(),
src/handlers/implicit_sound_handler.rs:40:        let soundeffect_files = fs::read_dir("./MP3s").unwrap();
src/handlers/explicit_sound_handler.rs:29:        let soundeffect_files = fs::read_dir("./MP3s").unwrap();
src/handlers/explicit_sound_handler.rs:32:            mp3s.insert(soundeffect_file.unwrap().path().display().to_string());
src/handlers/obs_messages_handler.rs:469:        let obs_client = obs::create_obs_client().await.unwrap();
src/handlers/obs_messages_handler.rs:481:            .unwrap();
src/handlers/obs_messages_handler.rs:489:            obs_client.inputs().settings::<Value>(source).await.unwrap();
crates/twitch_notifications/src/lib.rs:26:    let notification: Value = serde_json::from_slice(&body).unwrap();
crates/twitch_notifications/src/lib.rs:31:        .unwrap()
crates/twitch_notifications/src/lib.rs:33:        .unwrap()
crates/twitch_notifications/src/lib.rs:44:                .body(notification["challenge"].as_str().unwrap().to_string())
crates/subd-macros/src/lib.rs:48:    let mut model = models.pop().unwrap();
crates/subd-macros/src/lib.rs:114:                colon_token: f.colon_token.unwrap(),
crates/subd-macros/src/lib.rs:155:                primary_key.ident.unwrap(),
crates/skybox/src/lib.rs:150:    let skybox_api_key = env::var("SKYBOX_API_KEY").unwrap();
crates/skybox/src/lib.rs:249:    let skybox_api_key = env::var("SKYBOX_API_KEY").unwrap();
crates/subd-image-utils/src/lib.rs:77:    let mime_type = captures.name("mime").unwrap().as_str();
crates/subd-image-utils/src/lib.rs:78:    let base64_data = captures.name("data").unwrap().as_str();
crates/subd-gh/src/lib.rs:36:        .header(AUTHORIZATION, HeaderValue::from_str(&gh_token).unwrap())
crates/subd-gh/src/lib.rs:46:    let result = match response_body.data.unwrap().user {
crates/subd-gh/src/lib.rs:73:        .header(AUTHORIZATION, HeaderValue::from_str(&gh_token).unwrap())
crates/subd-gh/src/lib.rs:85:    Ok(response_body.data.unwrap().user.unwrap().is_sponsored_by)
crates/subd-audio/src/lib.rs:42:    let devices = host.output_devices().unwrap();
crates/ai_clones/src/lib.rs:139:    let res = obs_client.scene_items().list(scene).await.unwrap();
crates/ai_clones/src/lib.rs:185:        let obs_client = obs::create_obs_client().await.unwrap();
crates/ai_clones/src/lib.rs:189:            find_current_bogan_index(scene, &obs_client).await.unwrap();
crates/ai_music_videos/src/scenes_builder.rs:37:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/ai_music_videos/src/scenes_builder.rs:66:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/ai_music_videos/src/scenes_builder.rs:100:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/ai_music_videos/src/lib.rs:131:    let lyrics = ai_song.lyric.as_ref().unwrap();
crates/fal_ai/src/lib.rs:135:        let res = create_turbo_image(prompt).await.unwrap();
crates/fal_ai/src/lib.rs:144:        let res = create_from_fal_api(prompt).await.unwrap();
crates/fal_ai/src/utils.rs:6:    let dir = std::path::Path::new(filename).parent().unwrap();
crates/subd-elevenlabs/src/lib.rs:112:    let voices_contents = fs::read_to_string("data/voices.json").unwrap();
crates/subd-elevenlabs/src/lib.rs:113:    let voices: Vec<Voice> = serde_json::from_str(&voices_contents).unwrap();
crates/subd-yew/src/bin/site.rs:382:        .unwrap()
crates/subd-yew/src/bin/site.rs:384:        .unwrap()
crates/obs_service/src/obs.rs:8:        .unwrap();
crates/obs_bootstrap/src/lib.rs:177:            .unwrap();
crates/obs_bootstrap/src/lib.rs:208:            .unwrap();
crates/ai_movie_trailers/src/lib.rs:27:    let sink = rodio::Sink::try_new(&stream_handle).unwrap();
crates/ai_movie_trailers/src/utils.rs:80:    let mime_type = captures.name("mime").unwrap().as_str();
crates/ai_movie_trailers/src/utils.rs:81:    let base64_data = captures.name("data").unwrap().as_str();
