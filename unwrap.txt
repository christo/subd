crates/subd-elevenlabs/src/lib.rs:112:    let voices_contents = fs::read_to_string("data/voices.json").unwrap();
crates/subd-elevenlabs/src/lib.rs:113:    let voices: Vec<Voice> = serde_json::from_str(&voices_contents).unwrap();
crates/subd-audio/src/lib.rs:17:        File::open(format!("./MP3s/{}.mp3", soundname)).unwrap(),
crates/subd-audio/src/lib.rs:23:    sink.append(Decoder::new(BufReader::new(file)).unwrap());
crates/subd-audio/src/lib.rs:32:    let devices = host.output_devices().unwrap();
crates/subd-audio/src/lib.rs:41:        let dev_name = dev.name().unwrap();
crates/subd-audio/src/lib.rs:55:    let devices = host.output_devices().unwrap();
crates/subd-audio/src/lib.rs:58:        println!("Device found: {}", device.name().unwrap());
crates/subd-audio/src/lib.rs:61:    let devices = host.output_devices().unwrap();
crates/subd-audio/src/lib.rs:64:        let dev_name: String = dev.name().unwrap();
crates/subd-audio/src/lib.rs:67:            return Ok(OutputStream::try_from_device(&dev).unwrap());
crates/subd-audio/src/lib.rs:98:            normalize_tts_file(local_audio_path.clone()).unwrap();
crates/subd-openai/src/lib.rs:109:        env::var("OPENAI_API_KEY").unwrap(),
crates/obs_move_transition/src/lib.rs:61:    println!("{}", serde_json::to_string_pretty(&settings).unwrap());
crates/obs_move_transition/src/lib.rs:90:    println!("{}", serde_json::to_string_pretty(&settings).unwrap());
crates/obs_move_transition/src/lib.rs:131:    println!("{}", serde_json::to_string_pretty(&settings).unwrap());
crates/obs_move_transition/src/lib.rs:243:    println!("{}", serde_json::to_string_pretty(&settings).unwrap());
crates/obs_move_transition/src/lib.rs:284:        let obs_client = create_obs_client().await.unwrap();
crates/obs_move_transition/src/lib.rs:293:        let obs_client = create_obs_client().await.unwrap();
crates/obs_move_transition/src/lib.rs:298:        let res = obs_client.filters().get(scene, filter_name).await.unwrap();
crates/obs_move_transition/src/lib.rs:319:        let obs_client = create_obs_client().await.unwrap();
crates/subd-macros/src/lib.rs:48:    let mut model = models.pop().unwrap();
crates/subd-macros/src/lib.rs:114:                colon_token: f.colon_token.unwrap(),
crates/subd-macros/src/lib.rs:155:                primary_key.ident.unwrap(),
crates/twitch_notifications/src/lib.rs:24:    //if verify_message(&hmac_hex, req.headers().get("Twitch-Eventsub-Message-Signature").unwrap().to_str().unwrap()) {
crates/twitch_notifications/src/lib.rs:26:    let notification: Value = serde_json::from_slice(&body).unwrap();
crates/twitch_notifications/src/lib.rs:31:        .unwrap()
crates/twitch_notifications/src/lib.rs:33:        .unwrap()
crates/twitch_notifications/src/lib.rs:41:            // HttpResponse::Ok().content_type("text/plain").body(notification["challenge"].as_str().unwrap())
crates/twitch_notifications/src/lib.rs:44:                .body(notification["challenge"].as_str().unwrap().to_string())
crates/twitch_notifications/src/lib.rs:59://     let id = req.headers().get("Twitch-Eventsub-Message-Id").unwrap().to_str().unwrap();
crates/twitch_notifications/src/lib.rs:60://     let timestamp = req.headers().get("Twitch-Eventsub-Message-Timestamp").unwrap().to_str().unwrap();
crates/twitch_notifications/src/lib.rs:61://     format!("{}{}{}", id, timestamp, str::from_utf8(body).unwrap())
crates/obs_service/src/obs.rs:8:        .unwrap();
crates/obs_service/src/obs_source.rs:574:    let scale = BigDecimal::from_f32(scale).unwrap();
crates/obs_service/src/obs_source.rs:575:    let position_x = BigDecimal::from_f32(position_x).unwrap();
crates/obs_service/src/obs_source.rs:576:    let position_y = BigDecimal::from_f32(position_y).unwrap();
crates/obs_service/src/obs_source.rs:599:    let position_x = BigDecimal::from_f32(position_x).unwrap();
crates/obs_service/src/obs_source.rs:600:    let position_y = BigDecimal::from_f32(position_y).unwrap();
crates/obs_service/src/obs_source.rs:658://         let x = BigDecimal::from_f32(position_x).unwrap();
crates/obs_service/src/obs_source.rs:659://         let y = BigDecimal::from_f32(position_y).unwrap();
crates/obs_service/src/obs_source.rs:660://         let scale = BigDecimal::from_f32(scale).unwrap();
crates/subd-gh/src/lib.rs:36:        .header(AUTHORIZATION, HeaderValue::from_str(&gh_token).unwrap())
crates/subd-gh/src/lib.rs:46:    let result = match response_body.data.unwrap().user {
crates/subd-gh/src/lib.rs:73:        .header(AUTHORIZATION, HeaderValue::from_str(&gh_token).unwrap())
crates/subd-gh/src/lib.rs:85:    Ok(response_body.data.unwrap().user.unwrap().is_sponsored_by)
crates/websockets/src/main.rs:60:        .unwrap();
crates/websockets/src/main.rs:61:    tracing::debug!("listening on {}", listener.local_addr().unwrap());
crates/websockets/src/main.rs:67:    .unwrap();
crates/obs_bootstrap/src/lib.rs:177:            .unwrap();
crates/obs_bootstrap/src/lib.rs:208:            .unwrap();
crates/obs_filters/src/three_d_transform.rs:177://         let obs_client = obs::create_obs_client().await.unwrap();
crates/ai_clones/src/lib.rs:139:    let res = obs_client.scene_items().list(scene).await.unwrap();
crates/ai_clones/src/lib.rs:185:        let obs_client = obs::create_obs_client().await.unwrap();
crates/ai_clones/src/lib.rs:189:            find_current_bogan_index(scene, &obs_client).await.unwrap();
crates/ai_music_videos/src/lib.rs:131:    let lyrics = ai_song.lyric.as_ref().unwrap();
crates/ai_music_videos/src/scenes_builder.rs:37:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/ai_music_videos/src/scenes_builder.rs:66:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/ai_music_videos/src/scenes_builder.rs:100:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
crates/obs_filters/src/glow_stroke_shadow.rs:98:    //    let obs_client = obs::create_obs_client().await.unwrap();
crates/obs_filters/src/glow_stroke_shadow.rs:104:    //        obs_client.filters().get(source, &filter).await.unwrap();
crates/obs_filters/src/glow_stroke_shadow.rs:113:    //        .unwrap();
crates/obs_filters/src/glow_stroke_shadow.rs:121:    //        obs_client.inputs().settings::<Value>(source).await.unwrap();
crates/twitch_chat/src/model.rs:76://     response.total.unwrap() as usize
crates/subd-yew/src/bin/site.rs:382:        .unwrap()
crates/subd-yew/src/bin/site.rs:384:        .unwrap()
crates/subd-suno/src/lib.rs:187:                        get_audio_information(&id).await.unwrap();
crates/subd-suno/src/lib.rs:191:                    let song_id = Uuid::parse_str(&id).unwrap();
crates/subd-suno/src/lib.rs:218:                    // These unwraps are bad!!!
crates/subd-suno/src/lib.rs:221:                        .unwrap();
crates/subd-suno/src/lib.rs:225:                        .unwrap();
crates/subd-suno/src/lib.rs:355:        let result = get_audio_information(id).await.unwrap();
crates/skybox/src/skybox_requests.rs:122:        //     .unwrap();
crates/skybox/src/skybox_requests.rs:140:        //                 .unwrap();
crates/skybox/src/lib.rs:150:    let skybox_api_key = env::var("SKYBOX_API_KEY").unwrap();
crates/skybox/src/lib.rs:249:    let skybox_api_key = env::var("SKYBOX_API_KEY").unwrap();
crates/fal_ai/src/lib.rs:138:        let res = create_turbo_image(prompt).await.unwrap();
crates/fal_ai/src/lib.rs:147:        let res = create_from_fal_api(prompt).await.unwrap();
crates/fal_ai/src/utils.rs:6:    let dir = std::path::Path::new(filename).parent().unwrap();
crates/subd-image-utils/src/lib.rs:84:    let mime_type = captures.name("mime").unwrap().as_str();
crates/subd-image-utils/src/lib.rs:85:    let base64_data = captures.name("data").unwrap().as_str();
crates/ai_movie_trailers/src/lib.rs:27:    let sink = rodio::Sink::try_new(&stream_handle).unwrap();
crates/ai_movie_trailers/src/utils.rs:80:    let mime_type = captures.name("mime").unwrap().as_str();
crates/ai_movie_trailers/src/utils.rs:81:    let base64_data = captures.name("data").unwrap().as_str();
src/bin/insert_themesong.rs:25:    let (_stream, handle) = rodio::OutputStream::try_default().unwrap();
src/bin/insert_themesong.rs:26:    let sink = rodio::Sink::try_new(&handle).unwrap();
src/bin/insert_themesong.rs:29:    sink.append(rodio::Decoder::new(BufReader::new(x)).unwrap());
src/bin/update_ai_song_info.rs:99:        let id = Path::new(&song).file_stem().unwrap().to_str().unwrap();
src/bin/update_ai_song_info.rs:104:        let song_id = Uuid::parse_str(id).unwrap();
src/bin/websockets.rs:78:        .unwrap();
src/bin/websockets.rs:79:    tracing::debug!("listening on {}", listener.local_addr().unwrap());
src/bin/websockets.rs:85:    .unwrap();
src/bin/youtubedl.rs:14:    let (_stream, handle) = rodio::OutputStream::try_default().unwrap();
src/bin/youtubedl.rs:15:    let sink = rodio::Sink::try_new(&handle).unwrap();
src/bin/begin.rs:91:        let elevenlabs_auth = Auth::from_env().unwrap();
src/bin/begin.rs:126:        "macos" => rodio::OutputStream::try_default().unwrap(),
src/bin/ai_test.rs:25:    let client = Client::new(env::var("OPENAI_API_KEY").unwrap().to_string());
src/bin/ai_test.rs:41:        .unwrap();
src/bin/music_video_creator_site.rs:36:    let listener = tokio::net::TcpListener::bind("0.0.0.0:4001").await.unwrap();
src/bin/music_video_creator_site.rs:37:    axum::serve(listener, app).await.unwrap();
src/bin/chat.rs:309:        get_lb_status().lock().unwrap().clone(),
src/bin/chat.rs:367:        .unwrap();
src/themesong/mod.rs:89:    Ok(played_count.result.unwrap() > 0)
src/themesong/mod.rs:336:        let (stream, handle) = rodio::OutputStream::try_default().unwrap();
src/themesong/mod.rs:564:            validate_themesong("https://youtu.be/QMVIJhC9Veg").unwrap(),
src/themesong/mod.rs:570:                .unwrap(),
src/themesong/mod.rs:581:            .unwrap(),
src/bin/twitter.rs:22:        BearerToken::new(std::env::var("TWITTER_APP_BEARER_TOKEN").unwrap());
src/redemptions.rs:106:    let ids: Vec<Uuid> = res.unwrap().iter().map(|r| r.reward_id).collect();
src/handlers/explicit_sound_handler.rs:29:        let soundeffect_files = fs::read_dir("./MP3s").unwrap();
src/handlers/explicit_sound_handler.rs:32:            mp3s.insert(soundeffect_file.unwrap().path().display().to_string());
src/handlers/obs_messages_handler.rs:469:        let obs_client = obs::create_obs_client().await.unwrap();
src/handlers/obs_messages_handler.rs:472:        //     obs_client.filters().get(source, &filter).await.unwrap();
src/handlers/obs_messages_handler.rs:481:            .unwrap();
src/handlers/obs_messages_handler.rs:489:            obs_client.inputs().settings::<Value>(source).await.unwrap();
src/handlers/chatgpt_response_handler.rs:29:        let metadata = fs::metadata(response_file).await.unwrap();
src/handlers/chatgpt_response_handler.rs:30:        let mut last_modified = metadata.modified().unwrap();
src/handlers/chatgpt_response_handler.rs:33:            let metadata = fs::metadata(response_file).await.unwrap();
src/handlers/chatgpt_response_handler.rs:34:            let current_modified = metadata.modified().unwrap();
src/handlers/chatgpt_response_handler.rs:37:                let mut file = fs::File::open(response_file).await.unwrap();

src/handlers/ai_screenshots_timer_handler.rs:113:    let selected_choice = choices.choose(&mut rng).unwrap();
src/handlers/ai_telephone_handler.rs:94:            let id = splitmsg.get(1).unwrap();




src/handlers/skybox_status_handler.rs:44:            // we must be unwrapping and crashing at some point
src/handlers/skybox_status_handler.rs:48:                    .unwrap();
src/handlers/skybox_status_handler.rs:84:                            let mut file = File::create(archive_file).unwrap();
src/handlers/skybox_status_handler.rs:85:                            file.write_all(&image_data).unwrap();
src/handlers/skybox_status_handler.rs:93:                            let mut file = File::create(new_skybox).unwrap();
src/handlers/skybox_status_handler.rs:94:                            let render = skybox_template.render().unwrap();
src/handlers/skybox_status_handler.rs:95:                            file.write_all(render.as_bytes()).unwrap();
