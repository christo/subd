crates/twitch_stream_state/src/lib.rs:17:        pub dalle_model: String,
crates/twitch_stream_state/src/lib.rs:59:pub async fn get_current_song_id(pool: &PgPool) -> Result<String> {
crates/twitch_stream_state/src/lib.rs:66:pub async fn get_ai_background_theme(pool: &PgPool) -> Result<String> {
crates/subd-twitch/src/rewards.rs:18:    let broadcaster_id: String = env::var("TWITCH_BROADCAST_ID")
crates/subd-twitch/src/rewards.rs:43:    broadcaster_id: String,
crates/subd-twitch/src/rewards.rs:54:        broadcaster_id: String,
crates/subd-twitch/src/rewards.rs:66:    pub async fn update_reward(&self, id: String, cost: usize) -> Result<()> {
crates/subd-twitch/src/rewards.rs:84:    ) -> Result<String> {
crates/ai_telephone/src/lib.rs:21:    url: String,
crates/ai_telephone/src/lib.rs:22:    prompt: String,
crates/ai_telephone/src/lib.rs:25:) -> Result<String, anyhow::Error> {
crates/ai_telephone/src/lib.rs:119:    filename: String,
crates/ai_telephone/src/lib.rs:121:    prompt: String,
crates/ai_telephone/src/lib.rs:122:    source: String,
crates/ai_telephone/src/lib.rs:123:    archive_dir: Option<String>,
crates/ai_telephone/src/lib.rs:124:) -> Result<String> {
crates/ai_telephone/src/lib.rs:147:    filename: String,
crates/ai_telephone/src/lib.rs:149:    prompt: String,
crates/ai_telephone/src/lib.rs:150:    source: String,
crates/ai_telephone/src/lib.rs:151:    archive_dir: Option<String>,
crates/ai_telephone/src/lib.rs:152:) -> Result<String> {
crates/ai_telephone/src/lib.rs:187:    og_image: String,
crates/ai_telephone/src/lib.rs:219:    id: String,
crates/twitch_notifications/src/lib.rs:54:// fn get_secret() -> String {
crates/twitch_notifications/src/lib.rs:58:// fn get_hmac_message(req: &HttpRequest, body: &web::Bytes) -> String {
crates/ai_friends/src/lib.rs:18:    image_file_path: String,
crates/ai_friends/src/lib.rs:19:    local_audio_path: String,
crates/ai_friends/src/lib.rs:20:    friend_name: String,
crates/ai_friends/src/lib.rs:83:    friend_name: String,
crates/websockets/src/main.rs:83:        String::from("Unknown browser")
crates/obs_bootstrap/src/lib.rs:18:    pub commit: String,
crates/obs_bootstrap/src/lib.rs:153:    pub commit: Option<String>,
crates/obs_bootstrap/src/lib.rs:294:        filter: String::from(&subd_types::consts::get_scroll_filter_name()),
crates/obs_bootstrap/src/lib.rs:436:    pub source: Option<String>,
crates/obs_bootstrap/src/lib.rs:439:    pub filter: String,
crates/obs_bootstrap/src/lib.rs:452:    pub setting_name: String,
crates/twitch_service/src/lib.rs:8:    login: String,
crates/twitch_service/src/lib.rs:9:    name: String,
crates/obs_filters/src/three_d_transform.rs:11://     fn filter_name(&self) -> String;
crates/obs_filters/src/three_d_transform.rs:17://     fn filter_name(&self) -> String {
crates/obs_filters/src/three_d_transform.rs:24://     fn filter_name(&self) -> String {
crates/obs_filters/src/three_d_transform.rs:31://     fn filter_name(&self) -> String {
crates/obs_filters/src/blur.rs:6:    pub commit: Option<String>,
crates/obs_filters/src/blur.rs:15:    pub step_type: Option<String>,
crates/obs_filters/src/glow_stroke_shadow.rs:7:    stroke_fill_source: String,
crates/obs_filters/src/glow_stroke_shadow.rs:11:    stroke_source: Option<String>,
crates/obs_filters/src/glow_stroke_shadow.rs:29:    _stroke_fill_source: Option<String>,
crates/obs_filters/src/glow_stroke_shadow.rs:33:    _stroke_source: Option<String>,
crates/obs_filters/src/three_d_filter/corner_pin.rs:7:    fn filter_name(&self) -> String {
crates/obs_filters/src/three_d_filter/orthographic.rs:43:    fn filter_name(&self) -> String {
crates/obs_filters/src/three_d_filter/mod.rs:26:    fn filter_name(&self) -> String;
crates/obs_filters/src/three_d_filter/perspective.rs:7:    fn filter_name(&self) -> String {
crates/ai_clones/src/lib.rs:25:    splitmsg: Vec<String>,
crates/ai_clones/src/lib.rs:65:    path: String,
crates/ai_clones/src/lib.rs:100:    source: &String,
crates/ai_clones/src/lib.rs:115:    source: &String,
crates/ai_clones/src/lib.rs:149:    path: String,
crates/ai_clones/src/lib.rs:151:) -> Result<(String, i32)> {
crates/ai_clones/src/utils.rs:7:    screenshot_source: String,
crates/ai_clones/src/utils.rs:9:) -> Result<(String, String)> {
crates/ai_clones/src/chat.rs:6:    splitmsg: &Vec<String>,
crates/ai_clones/src/chat.rs:7:    screenshot_source: String,
crates/ai_clones/src/chat.rs:8:) -> Result<(String, Option<f32>)> {
crates/ai_music_videos/src/lib.rs:40:    id: String,
crates/ai_music_videos/src/lib.rs:41:    prompt: Option<String>,
crates/ai_music_videos/src/lib.rs:43:) -> Result<String> {
crates/ai_music_videos/src/lib.rs:109:                .map(String::from)
crates/ai_music_videos/src/lib.rs:124:    id: String,
crates/ai_music_videos/src/lib.rs:125:) -> Result<String> {
crates/ai_music_videos/src/lib.rs:155:                .map(String::from)
crates/ai_music_videos/src/lib.rs:186:    let results: Vec<Result<String>> = join_all(futures).await;
crates/ai_music_videos/src/lib.rs:207:    let video_filenames: Vec<String> = join_all(video_results)
crates/ai_music_videos/src/lib.rs:224:    prompt: String,
crates/ai_music_videos/src/lib.rs:225:    id: String,
crates/ai_music_videos/src/lib.rs:227:) -> Result<String> {
crates/ai_music_videos/src/lib.rs:250:) -> Result<String> {
crates/ai_music_videos/src/lib.rs:264:    id: String,
crates/ai_music_videos/src/lib.rs:266:) -> Result<String> {
crates/ai_music_videos/src/lib.rs:285:pub async fn create_music_video(pool: &PgPool, id: String) -> Result<String> {
crates/ai_music_videos/src/lib.rs:305:    lyric: &Option<String>,
crates/ai_music_videos/src/lib.rs:307:) -> Result<Vec<String>> {
crates/ai_music_videos/src/lib.rs:322:    lyric_chunks: &[String],
crates/ai_music_videos/src/lib.rs:364:fn create_video(song_id: &str) -> Result<String> {
crates/ai_music_videos/src/lib.rs:397:fn combine_videos(video_chunks: Vec<String>, output_file: &str) -> Result<()> {
crates/ai_music_videos/src/lib.rs:398:    let mut input_files = String::new();
crates/ai_music_videos/src/scenes_builder.rs:21:    pub image_prompt: String,
crates/ai_music_videos/src/scenes_builder.rs:22:    pub camera_move: String,
crates/ai_music_videos/src/scenes_builder.rs:23:    pub image_name: Option<String>,
crates/ai_music_videos/src/scenes_builder.rs:28:    pub scene_description: String,
crates/ai_music_videos/src/scenes_builder.rs:29:    pub camera_move: String,
crates/ai_music_videos/src/scenes_builder.rs:35:    prompt: String,
crates/ai_music_videos/src/scenes_builder.rs:63:    lyrics: String,
crates/ai_music_videos/src/scenes_builder.rs:64:    title: String,
crates/ai_music_videos/src/scenes_builder.rs:97:    lyrics: String,
crates/ai_music_videos/src/scenes_builder.rs:98:    title: String,
crates/ai_music_videos/src/tests.rs:18:                .map(String::from)
crates/stable_diffusion/src/service.rs:14:    Prompt(String),
crates/ai_playlist/src/models.rs:49:) -> Result<Vec<(String, Option<i64>)>> {
crates/ai_playlist/src/models.rs:74:        pub title: String,
crates/ai_playlist/src/models.rs:75:        pub tags: String,
crates/ai_playlist/src/models.rs:76:        pub prompt: String,
crates/ai_playlist/src/models.rs:77:        pub username: String,
crates/ai_playlist/src/models.rs:78:        pub audio_url: String,
crates/ai_playlist/src/models.rs:79:        pub gpt_description_prompt: String,
crates/ai_playlist/src/models.rs:81:        pub lyric: Option<String>,
crates/ai_playlist/src/models.rs:221:        pub image_name: String,
crates/ai_playlist/src/models.rs:230:    image_names: Vec<String>,
crates/ai_playlist/src/models.rs:231:) -> Result<Vec<(String, String, i64, i64)>, sqlx::Error> {
crates/ai_playlist/src/models.rs:232:    // let image_names_without_ext: Vec<String> = image_names
crates/ai_playlist/src/models.rs:275:) -> Result<Vec<(Uuid, String, i64, i64)>, sqlx::Error> {
crates/stable_diffusion/scrapts.txt:7://         prompt: String,
crates/stable_diffusion/scrapts.txt:8://         save_folder: Option<String>,
crates/stable_diffusion/scrapts.txt:10://     ) -> Pin<Box<(dyn warp::Future<Output = String> + std::marker::Send + '_)>>
crates/stable_diffusion/src/lib.rs:20:) -> Result<String> {
crates/stable_diffusion/src/lib.rs:27:) -> Result<String> {
crates/stable_diffusion/src/lib.rs:38:) -> Result<String> {
crates/stable_diffusion/src/models.rs:5:    pub prompt: String,
crates/stable_diffusion/src/models.rs:6:    pub unique_identifier: String,
crates/stable_diffusion/src/models.rs:9:    pub additional_archive_dir: Option<String>,
crates/stable_diffusion/src/models.rs:15:        prompt: String,
crates/stable_diffusion/src/models.rs:16:        unique_identifier: String,
crates/stable_diffusion/src/models.rs:47:        prompt: String,
crates/stable_diffusion/src/models.rs:48:        unique_identifier: String,
crates/stable_diffusion/src/models.rs:66:        additional_archive_dir: String,
crates/stable_diffusion/src/models.rs:80:    pub prompt: String,
crates/stable_diffusion/src/models.rs:81:    pub unique_identifier: String,
crates/stable_diffusion/src/models.rs:84:    pub additional_archive_dir: Option<String>,
crates/stable_diffusion/src/models.rs:90:    pub prompt: String,
crates/stable_diffusion/src/models.rs:91:    pub username: String,
crates/stable_diffusion/src/models.rs:101:    Img2ImgFile(String),
crates/stable_diffusion/src/models.rs:102:    Img2ImgURL(String),
crates/stable_diffusion/src/models.rs:112:    pub b64_json: String,
crates/stable_diffusion/src/models.rs:113:    pub revised_prompt: String,
crates/ai_playlist/src/lib.rs:11:) -> (Vec<String>, Vec<(String, String, i64, i64)>) {
crates/ai_playlist/src/lib.rs:21:        .collect::<Vec<String>>();
crates/ai_playlist/src/lib.rs:270:) -> Result<Vec<(String, Option<i64>)>> {
crates/ai_playlist/src/lib.rs:315:    new_tags: String,
crates/stable_diffusion/src/utils.rs:9:    unique_identifier: String,
crates/stable_diffusion/src/utils.rs:10:    filename: String,
crates/stable_diffusion/src/utils.rs:11:) -> Result<(String, Vec<u8>)> {
crates/stable_diffusion/src/tests.rs:31:        let mut contents = String::new();
crates/twitch_chat/src/client.rs:11:    pub broadcaster_username: String,
crates/twitch_chat/src/client.rs:20:        broadcaster_username: String,
crates/twitch_chat/src/client.rs:50:    msg: impl Into<String>,
crates/user_service/src/models.rs:16:        pub contents: String,
crates/subd-yew/src/bin/site.rs:20:fn _make_emote_url(emote: &Emote) -> String {
crates/subd-yew/src/bin/site.rs:64:        //         .collect::<String>();
crates/subd-yew/src/bin/site.rs:80:        //         .collect::<String>();
crates/subd-yew/src/bin/site.rs:83:        let remaining = contents.collect::<String>();
crates/subd-yew/src/bin/site.rs:184:// fn print_type_of<T>(_: &T) -> String {
crates/subd-yew/src/bin/site.rs:190:    pub ws_address: String,
crates/subd-yew/src/components/raffle.rs:27:    // existing_names: HashSet<String>,
crates/subd-types/src/twitch.rs:12:    pub login: String,
crates/subd-types/src/twitch.rs:13:    pub name: String,
crates/subd-types/src/twitch.rs:18:    id: String,
crates/subd-types/src/twitch.rs:19:    login: String,
crates/subd-types/src/twitch.rs:26:    pub id: String,
crates/subd-types/src/twitch.rs:53:    pub message_id: String,
crates/subd-types/src/twitch.rs:71:    pub text: String,
crates/subd-suno/src/models.rs:5:    pub id: String,
crates/subd-suno/src/models.rs:6:    pub video_url: String,
crates/subd-suno/src/models.rs:7:    pub audio_url: String,
crates/subd-suno/src/models.rs:8:    pub image_url: Option<String>,
crates/subd-suno/src/models.rs:9:    pub lyric: Option<String>,
crates/subd-suno/src/models.rs:10:    pub image_large_url: Option<String>,
crates/subd-suno/src/models.rs:13:    pub major_model_version: String,
crates/subd-suno/src/models.rs:14:    pub model_name: String,
crates/subd-suno/src/models.rs:18:    pub display_name: String,
crates/subd-suno/src/models.rs:20:    pub handle: String,
crates/subd-suno/src/models.rs:24:    pub avatar_image_url: String,
crates/subd-suno/src/models.rs:28:    pub user_id: String,
crates/subd-suno/src/models.rs:30:    pub created_at: String,
crates/subd-suno/src/models.rs:32:    pub status: String,
crates/subd-suno/src/models.rs:34:    pub title: String,
crates/subd-suno/src/models.rs:51:    id: Option<String>,
crates/subd-suno/src/models.rs:52:    video_url: Option<String>,
crates/subd-suno/src/models.rs:53:    audio_url: Option<String>,
crates/subd-suno/src/models.rs:54:    image_url: Option<String>,
crates/subd-suno/src/models.rs:55:    lyric: Option<String>,
crates/subd-suno/src/models.rs:56:    image_large_url: Option<String>,
crates/subd-suno/src/models.rs:58:    major_model_version: Option<String>,
crates/subd-suno/src/models.rs:59:    model_name: Option<String>,
crates/subd-suno/src/models.rs:61:    display_name: Option<String>,
crates/subd-suno/src/models.rs:62:    handle: Option<String>,
crates/subd-suno/src/models.rs:64:    avatar_image_url: Option<String>,
crates/subd-suno/src/models.rs:66:    user_id: Option<String>,
crates/subd-suno/src/models.rs:67:    created_at: Option<String>,
crates/subd-suno/src/models.rs:68:    status: Option<String>,
crates/subd-suno/src/models.rs:69:    title: Option<String>,
crates/subd-suno/src/models.rs:76:    pub fn id(mut self, id: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:81:    pub fn video_url(mut self, url: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:86:    pub fn audio_url(mut self, url: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:91:    pub fn image_url(mut self, url: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:96:    pub fn lyric(mut self, lyric: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:101:    pub fn title(mut self, title: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:141:    pub tags: String,
crates/subd-suno/src/models.rs:142:    pub prompt: String,
crates/subd-suno/src/models.rs:143:    pub gpt_description_prompt: String,
crates/subd-suno/src/models.rs:145:    pub type_field: String,
crates/subd-suno/src/models.rs:158:    pub fn prompt(mut self, prompt: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:166:    tags: Option<String>,
crates/subd-suno/src/models.rs:167:    prompt: Option<String>,
crates/subd-suno/src/models.rs:168:    gpt_description_prompt: Option<String>,
crates/subd-suno/src/models.rs:169:    type_field: Option<String>,
crates/subd-suno/src/models.rs:176:    pub fn tags(mut self, tags: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:181:    pub fn prompt(mut self, prompt: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:186:    pub fn gpt_description_prompt(mut self, desc: impl Into<String>) -> Self {
crates/subd-suno/src/models.rs:191:    pub fn type_field(mut self, type_field: impl Into<String>) -> Self {
crates/subd-types/src/consts.rs:7:pub fn get_twitch_bot_oauth() -> String {
crates/subd-types/src/consts.rs:8:    static TWITCH_BOT_OAUTH: OnceCell<String> = OnceCell::new();
crates/subd-types/src/consts.rs:22:pub fn get_twitch_broadcaster_raw() -> String {
crates/subd-types/src/consts.rs:23:    static TWITCH_BROADCASTER_OAUTH: OnceCell<String> = OnceCell::new();
crates/subd-types/src/consts.rs:66:pub fn get_github_broadcaster_token() -> String {
crates/subd-types/src/consts.rs:71:    String::from("token ")
crates/subd-types/src/consts.rs:77:pub fn get_database_url() -> String {
crates/subd-types/src/consts.rs:81:pub fn get_test_database_url() -> String {
crates/subd-types/src/consts.rs:85:pub fn get_twitch_broadcaster_username() -> String {
crates/subd-types/src/consts.rs:90:pub fn get_twitch_broadcaster_channel_id() -> String {
crates/subd-types/src/consts.rs:95:pub fn get_twitch_bot_username() -> String {
crates/subd-types/src/consts.rs:100:pub fn get_twitch_bot_channel_id() -> String {
crates/subd-types/src/consts.rs:105:pub fn get_obs_websocket_address() -> String {
crates/subd-types/src/consts.rs:110:pub fn get_obs_websocket_port() -> String {
crates/subd-types/src/consts.rs:115:pub fn get_obs_test_scene() -> String {
crates/subd-types/src/consts.rs:119:pub fn get_obs_test_source() -> String {
crates/subd-types/src/consts.rs:123:pub fn get_obs_test_filter() -> String {
crates/subd-types/src/consts.rs:127:pub fn get_ai_videos_dir() -> String {
crates/subd-types/src/consts.rs:132:pub fn get_get_ai_images_dir() -> String {
crates/subd-types/src/consts.rs:137:pub fn get_fal_responses_dir() -> String {
crates/subd-types/src/consts.rs:142:pub fn get_obs_background_image_path() -> String {
crates/subd-types/src/consts.rs:147:pub fn get_ai_twin_obs_source() -> String {
crates/subd-types/src/consts.rs:151:pub fn get_sdf_effects_filter_name() -> String {
crates/subd-types/src/consts.rs:157:pub fn get_sdf_effects_internal_filter_name() -> String {
crates/subd-types/src/consts.rs:162:pub fn get_move_outline_filter_name() -> String {
crates/subd-types/src/consts.rs:167:pub fn get_default_obs_source() -> String {
crates/subd-types/src/consts.rs:171:pub fn get_default_obs_scene() -> String {
crates/subd-types/src/consts.rs:175:pub fn get_primary_camera_scene() -> String {
crates/subd-types/src/consts.rs:179:pub fn get_move_internal_filter_name() -> String {
crates/subd-types/src/consts.rs:184:pub fn get_move_blur_filter_name() -> String {
crates/subd-types/src/consts.rs:189:pub fn get_blur_filter_name() -> String {
crates/subd-types/src/consts.rs:193:pub fn get_blur_internal_filter_name() -> String {
crates/subd-types/src/consts.rs:198:pub fn get_move_scroll_filter_name() -> String {
crates/subd-types/src/consts.rs:203:pub fn get_scroll_filter_name() -> String {
crates/subd-types/src/consts.rs:207:pub fn get_scroll_internal_filter_name() -> String {
crates/subd-types/src/consts.rs:212:pub fn get_stream_fx_internal_filter_name() -> String {
crates/subd-types/src/consts.rs:217:pub fn get_move_stream_fx_filter_name() -> String {
crates/subd-types/src/consts.rs:222:pub fn get_3d_transform_filter_name() -> String {
crates/subd-types/src/consts.rs:227:pub fn get_meme_scene() -> String {
crates/subd-types/src/consts.rs:231:pub fn get_default_stream_character_source() -> String {
crates/subd-types/src/consts.rs:236:pub fn get_twitch_default_source() -> String {
crates/subd-types/src/consts.rs:240:pub fn get_twitch_mod_default_voice() -> String {
crates/subd-types/src/consts.rs:245:pub fn get_twitch_default_voice() -> String {
crates/subd-types/src/consts.rs:250:pub fn get_twitch_staff_obs_source() -> String {
crates/subd-types/src/consts.rs:255:pub fn get_twitch_staff_voice() -> String {
crates/subd-types/src/consts.rs:259:pub fn get_twitch_helper_voice() -> String {
crates/subd-types/src/consts.rs:263:pub fn get_soundboard_text_source_name() -> String {
crates/subd-types/src/consts.rs:268:pub fn get_move_source_filter_kind() -> String {
crates/subd-types/src/lib.rs:26:pub struct TwitchUserID(pub String);
crates/subd-types/src/lib.rs:35:    type Error = String;
crates/subd-types/src/lib.rs:67:    pub user_name: String,
crates/subd-types/src/lib.rs:70:    pub contents: String,
crates/subd-types/src/lib.rs:75:    pub voice_text: String,
crates/subd-types/src/lib.rs:76:    pub message: String,
crates/subd-types/src/lib.rs:77:    pub username: String,
crates/subd-types/src/lib.rs:78:    pub voice: Option<String>,
crates/subd-types/src/lib.rs:80:    pub pitch: Option<String>,
crates/subd-types/src/lib.rs:81:    pub stretch: Option<String>,
crates/subd-types/src/lib.rs:82:    pub source: Option<String>,
crates/subd-types/src/lib.rs:83:    pub music_bg: Option<String>,
crates/subd-types/src/lib.rs:84:    pub prompt: Option<String>,
crates/subd-types/src/lib.rs:89:    pub voice_text: String,
crates/subd-types/src/lib.rs:90:    pub message: String,
crates/subd-types/src/lib.rs:91:    pub username: String,
crates/subd-types/src/lib.rs:92:    pub voice: Option<String>,
crates/subd-types/src/lib.rs:94:    pub pitch: Option<String>,
crates/subd-types/src/lib.rs:95:    pub stretch: Option<String>,
crates/subd-types/src/lib.rs:96:    pub source: Option<String>,
crates/subd-types/src/lib.rs:97:    pub music_bg: Option<String>,
crates/subd-types/src/lib.rs:98:    pub dalle_prompt: Option<String>,
crates/subd-types/src/lib.rs:103:    // pub voice: String,
crates/subd-types/src/lib.rs:104:    // pub voice_text: String,
crates/subd-types/src/lib.rs:105:    pub text_source: String,
crates/subd-types/src/lib.rs:106:    pub message: String,
crates/subd-types/src/lib.rs:111:    pub hotkey: String,
crates/subd-types/src/lib.rs:116:    pub source: String,
crates/subd-types/src/lib.rs:122:    pub scene: String,
crates/subd-types/src/lib.rs:123:    pub source: String,
crates/subd-types/src/lib.rs:129:    // pub msg: String,
crates/subd-types/src/lib.rs:135:    // pub msg: String,
crates/subd-types/src/lib.rs:141:    pub msg: String,
crates/subd-types/src/lib.rs:147:    pub msg: String,
crates/subd-types/src/lib.rs:178:        scene: String,
crates/subd-types/src/lib.rs:187:    RequestTwitchMessage(String),
crates/subd-types/src/lib.rs:207:        title: String,
crates/subd-types/src/lib.rs:208:        entries: HashMap<String, usize>,
crates/subd-types/src/lib.rs:211:        users: HashSet<String>,
crates/subd-types/src/lib.rs:220:    Suggest { text: String },
crates/subd-types/src/lib.rs:235:    pub text: String,
crates/subd-types/src/lib.rs:242:    Start { display_name: String },
crates/subd-types/src/lib.rs:243:    Finish { display_name: String, success: bool },
crates/subd-types/src/lib.rs:244:    Format { sender: String },
crates/subd-types/src/lib.rs:250:        T: ToString + 'static,
crates/subd-types/src/lib.rs:259:        T: ToString + 'static,
crates/subd-types/src/lib.rs:269:        T: ToString + 'static,
crates/subd-types/src/lib.rs:281:        display_name: String,
crates/subd-types/src/lib.rs:291:    pub id: String,
crates/subd-types/src/lib.rs:292:    pub login: String,
crates/subd-types/src/lib.rs:293:    pub name: String,
crates/subd-types/src/lib.rs:308:    GithubSponsor { tier: String },
crates/subd-types/src/lib.rs:414:    pub fn display_name(&self) -> String {
crates/subd-suno/src/lib.rs:18:    pub prompt: String,
crates/subd-suno/src/lib.rs:147:    user_name: String,
crates/subd-suno/src/lib.rs:148:    id: &String,
crates/subd-suno/src/lib.rs:260:    user_name: String,
crates/subd-suno/src/lib.rs:327:    id: String,
crates/subd-yew/src/components/lunchbytes/status.rs:6:    pub text: String,
crates/stream_character/src/lib.rs:10:        pub username: String,
crates/stream_character/src/lib.rs:11:        pub obs_character: String,
crates/stream_character/src/lib.rs:12:        pub voice: String,
crates/stream_character/src/lib.rs:45:) -> Result<String> {
crates/skybox/src/skybox_requests.rs:12:        pub prompt: String,
crates/skybox/src/skybox_requests.rs:14:        pub file_url: Option<String>,
crates/skybox/src/skybox_requests.rs:17:        pub username: String,
crates/skybox/src/skybox_requests.rs:49:    prompt: String,
crates/skybox/src/skybox_requests.rs:51:    username: String,
crates/skybox/src/skybox_requests.rs:79:    file_url: String,
crates/ai_images/src/lib.rs:11:    unique_identifier: String,
crates/ai_images/src/lib.rs:12:    filename: String,
crates/ai_images/src/lib.rs:13:) -> Result<(String, Vec<u8>)> {
crates/fal_ai/src/models.rs:5:    pub url: String,
crates/fal_ai/src/models.rs:8:    pub _content_type: Option<String>,
crates/ai_images/src/image_generation.rs:11:        prompt: String,
crates/ai_images/src/image_generation.rs:12:        save_folder: Option<String>,
crates/ai_images/src/image_generation.rs:14:    ) -> Pin<Box<(dyn warp::Future<Output = String> + std::marker::Send + '_)>>;
crates/ai_images/src/image_generation.rs:19:    username: String,
crates/ai_images/src/image_generation.rs:20:) -> Result<(PathBuf, String)> {
crates/fal_ai/src/fal_service.rs:15:    image_path: String,
crates/fal_ai/src/fal_service.rs:40:    ) -> Result<Vec<String>> {
crates/fal_ai/src/fal_service.rs:81:    ) -> Result<String> {
crates/fal_ai/src/fal_service.rs:112:    ) -> Result<String> {
crates/fal_ai/src/fal_service.rs:139:    ) -> Result<String> {
crates/fal_ai/src/fal_service.rs:249:    ) -> Result<String> {
crates/obs_3d_filter/src/corner_pin.rs:7:    fn filter_name(&self) -> String {
crates/ai_songs_vote/src/lib.rs:14:    pub title: String,
crates/ai_songs_vote/src/lib.rs:56:) -> Result<Vec<(String, Option<i64>)>> {
crates/ai_songs_vote/src/lib.rs:76:) -> Result<Vec<(String, i64, f64)>> {
crates/subd-image-utils/src/lib.rs:27:    url: String,
crates/subd-image-utils/src/lib.rs:28:    download_path: Option<String>,
crates/subd-image-utils/src/lib.rs:52:pub fn encode_image(image_path: &str) -> io::Result<String> {
crates/subd-image-utils/src/lib.rs:60:pub async fn encode_file_as_data_uri(file_path: &str) -> Result<String> {
crates/fal_ai/src/utils.rs:15:pub fn extract_video_url_from_fal_result(fal_result: &str) -> Result<String> {
crates/obs_3d_filter/src/perspective.rs:7:    fn filter_name(&self) -> String {
crates/obs_3d_filter/src/lib.rs:26:    fn filter_name(&self) -> String;
crates/obs_3d_filter/src/orthographic.rs:43:    fn filter_name(&self) -> String {
crates/subd-utils/src/lib.rs:71:pub fn get_files_by_ext(directory: &str, extensions: &[&str]) -> Vec<String> {
unwrap.txt:10:crates/subd-audio/src/lib.rs:64:        let dev_name: String = dev.name().unwrap();
output.csv:142:20240916011057_0_,Base it on the following information. how does String VS &str work in Rust?
crates/ai_movie_trailers/src/lib.rs:15:    local_audio_path: String,
static/20241009002703.js:29:      link.style.color = '#' + Math.floor(Math.random()*16777215).toString(16);
crates/ai_movie_trailers/src/utils.rs:131:pub fn extract_video_url_from_fal_result(fal_result: &str) -> Result<String> {
crates/subd-db/src/lib.rs:245://     pub login: String,
crates/subd-db/src/lib.rs:246://     pub display_name: String,
crates/subd-db/src/lib.rs:247://     pub broadcaster_type: String,
crates/subd-db/src/lib.rs:248://     pub account_type: String,
crates/subd-db/src/lib.rs:249://     pub offline_image_url: Option<String>,
crates/subd-db/src/lib.rs:250://     pub profile_image_url: Option<String>,
crates/subd-db/src/lib.rs:251://     pub account_created_at: Option<String>,
src/twitch_rewards.rs:11:        pub title: String,
src/twitch_rewards.rs:42:    title: String,
src/twitch_rewards.rs:66:) -> Result<Vec<String>> {
src/twitch_rewards.rs:67:    let mut ids: Vec<String> = vec![];
src/twitch_rewards.rs:90:    title: String,
src/twitch_rewards.rs:190:    title: String,
src/bin/websockets.rs:101:        String::from("Unknown browser")
src/bin/music_video_creator_site.rs:241:fn internal_error<E: std::fmt::Display>(err: E) -> (StatusCode, String) {
src/bin/music_video_creator_site.rs:245:fn not_found<E: std::fmt::Display>(err: E) -> (StatusCode, String) {
src/bin/ai_test.rs:20:    image_prompt: String,
src/bin/ai_test.rs:21:    camera_move: String,
src/bin/ai_test.rs:34:            content: chat_completion::Content::Text(String::from(prompt)),
src/bin/chat.rs:231://         .collect::<Vec<String>>();
src/bin/chat.rs:401:    //                 .collect::<Vec<String>>();
src/bin/chat.rs:495://     msg: impl Into<String>,
src/chat_parser/parser.rs:5:    Source(String),
src/chat_parser/parser.rs:11:    Source(String),
src/chat_parser/parser.rs:18:    EasingType(String),
src/chat_parser/parser.rs:19:    EasingFunction(String),
src/chat_parser/parser.rs:24:    pub source: String,
src/chat_parser/parser.rs:25:    pub _scene: String,
src/chat_parser/parser.rs:45:    pub source: String,
src/chat_parser/parser.rs:46:    pub scene: String,
src/chat_parser/parser.rs:54:    pub easing_type: String,
src/chat_parser/parser.rs:55:    pub easing_function: String,
src/chat_parser/parser.rs:93:    pub source: String,
src/chat_parser/parser.rs:96:    pub easing_type: String,
src/chat_parser/parser.rs:97:    pub easing_function: String,
src/chat_parser/parser.rs:103:    splitmsg: Vec<String>,
src/chat_parser/parser.rs:155:    splitmsg: Vec<String>,
src/chat_parser/parser.rs:232:    splitmsg: Vec<String>,
src/art_blocks.rs:8:    contract: String,
src/themesong/mod.rs:254:pub fn validate_themesong(themesong_url: &str) -> Result<String> {
src/themesong/mod.rs:465:                .collect::<Vec<String>>();
src/raffle.rs:25:    title: String,
src/raffle.rs:26:    users: HashMap<UserID, String>,
src/raffle.rs:60:        self.title = String::default();
src/raffle.rs:65:    fn open(&mut self, title: String) {
src/raffle.rs:99:        let mut entries: HashMap<String, usize> = HashMap::new();
src/raffle.rs:151:    //         .collect::<Vec<String>>();
src/handlers/ai_songs_handler.rs:75:                    let splitmsg: Vec<String> =
src/handlers/ai_songs_handler.rs:76:                        msg.contents.split_whitespace().map(String::from).collect();
src/handlers/ai_songs_handler.rs:106:    splitmsg: &[String],
src/handlers/ai_songs_handler.rs:261:    splitmsg: &[String],
src/handlers/ai_songs_handler.rs:303:    splitmsg: &[String],
src/handlers/ai_songs_handler.rs:353:    splitmsg: &[String],
src/handlers/ai_songs_handler.rs:373:    splitmsg: &[String],
src/handlers/ai_songs_handler.rs:423:    splitmsg: &[String],
src/commands/mod.rs:7:    pub contents: String,
src/commands/mod.rs:13:    pub slug: String,
src/commands/mod.rs:25://         songname: String,
src/redemptions.rs:15:        pub title: String,
src/redemptions.rs:17:        pub user_name: String,
src/redemptions.rs:25:        pub user_input: Option<String>,
src/redemptions.rs:56:    title: String,
src/redemptions.rs:58:    user_name: String,
src/redemptions.rs:61:    user_input: String,
src/handlers/ai_songs_downloader_handler.rs:20:    Download { id: String },
src/handlers/ai_songs_downloader_handler.rs:21:    CreateSong { prompt: String },
src/handlers/ai_songs_downloader_handler.rs:22:    CreateInstrumentalSong { prompt: String },
src/handlers/ai_songs_downloader_handler.rs:123:    user_name: String,
src/handlers/ai_songs_downloader_handler.rs:124:    id: String,
src/handlers/ai_songs_downloader_handler.rs:133:    user_name: String,
src/handlers/ai_songs_downloader_handler.rs:134:    prompt: String,
src/handlers/ai_screenshots_handler.rs:46:                .collect::<Vec<String>>();
src/handlers/ai_screenshots_handler.rs:79:    splitmsg: Vec<String>,
src/handlers/ai_screenshots_handler.rs:163:    filename: String,
src/handlers/ai_screenshots_handler.rs:164:    prompt: String,
src/handlers/ai_screenshots_handler.rs:165:    model: String,
src/handlers/ai_screenshots_handler.rs:166:    source: String,
src/handlers/fal_handler.rs:40:                .collect::<Vec<String>>();
src/handlers/fal_handler.rs:72:    splitmsg: Vec<String>,
src/handlers/chatgpt_response_handler.rs:39:                let mut contents = String::new();
src/handlers/explicit_sound_handler.rs:30:        let mut mp3s: HashSet<String> = vec![].into_iter().collect();
src/handlers/ai_music_video_creator_handler.rs:23:    CreateMusicVideoVideo { id: String, image_name: String },
src/handlers/ai_music_video_creator_handler.rs:24:    CreateMusicVideoImage { id: String, prompt: Option<String> },
src/handlers/ai_music_video_creator_handler.rs:25:    CreateMusicVideoImages { id: String, count: i64 },
src/handlers/ai_music_video_creator_handler.rs:26:    CreateMusicVideo { id: String },
src/handlers/ai_music_video_creator_handler.rs:57:    song_id: String,
src/handlers/ai_music_video_creator_handler.rs:58:    name: String,
src/handlers/ai_music_video_creator_handler.rs:59:) -> Result<(String, String, std::path::PathBuf)> {
src/handlers/ai_music_video_creator_handler.rs:92:                .map(String::from)?;
src/handlers/ai_music_video_creator_handler.rs:266:                .collect::<Vec<String>>();
src/handlers/obs_messages_handler.rs:49:                .collect::<Vec<String>>();
src/handlers/obs_messages_handler.rs:81:    splitmsg: Vec<String>,
src/handlers/elevenlabs_handler.rs:75:        audio_path: String,
src/handlers/elevenlabs_handler.rs:78:    ) -> Result<String> {
src/handlers/elevenlabs_handler.rs:169:    ) -> Result<String> {
src/handlers/elevenlabs_handler.rs:229:    ) -> Result<String> {
src/handlers/ai_screenshots_timer_handler.rs:68:) -> Result<String> {
src/handlers/ai_screenshots_timer_handler.rs:93:pub fn generate_random_prompt() -> String {
src/handlers/music_scenes_handler.rs:40:                .collect::<Vec<String>>();
src/handlers/music_scenes_handler.rs:65:    splitmsg: Vec<String>,
src/handlers/music_scenes_handler.rs:282:fn get_random_mp3_file_name(folder_path: &str) -> Option<String> {
src/handlers/music_scenes_handler.rs:310:    let new_music = match selected_file.file_name().to_str().map(String::from) {
src/handlers/ai_telephone_handler.rs:44:                .collect::<Vec<String>>();
src/handlers/ai_telephone_handler.rs:77:    splitmsg: Vec<String>,
src/handlers/reward_handler.rs:48:                .collect::<Vec<String>>();
src/handlers/reward_handler.rs:196:    title: String,
src/handlers/reward_handler.rs:199:) -> Result<String> {
src/handlers/reward_handler.rs:227:) -> Result<String> {
src/handlers/stream_background_handler.rs:38:                .collect::<Vec<String>>();
src/handlers/stream_background_handler.rs:61:    splitmsg: Vec<String>,
src/handlers/ai_songs_vote_handler.rs:40:                .collect::<Vec<String>>();
src/handlers/ai_songs_vote_handler.rs:68:    splitmsg: Vec<String>,
src/handlers/implicit_sound_handler.rs:21:    pub voice: Option<String>,
src/handlers/implicit_sound_handler.rs:22:    pub source: Option<String>,
src/handlers/implicit_sound_handler.rs:41:        let mut mp3s: HashSet<String> = vec![].into_iter().collect();
src/handlers/implicit_sound_handler.rs:144:                .collect::<Vec<String>>();
